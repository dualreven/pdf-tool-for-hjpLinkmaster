/* Copyright 2022 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 @import url(draw_layer_builder.css);
 @import url(toggle_button.css);
 :root {
   --outline-width: 2px;
   --outline-color: #0060df;
   --outline-around-width: 1px;
   --outline-around-color: #f0f0f4;
   --hover-outline-around-color: var(--outline-around-color);
   --focus-outline: solid var(--outline-width) var(--outline-color);
   --unfocus-outline: solid var(--outline-width) transparent;
   --focus-outline-around: solid var(--outline-around-width)
     var(--outline-around-color);
   --hover-outline-color: #8f8f9d;
   --hover-outline: solid var(--outline-width) var(--hover-outline-color);
   --hover-outline-around: solid var(--outline-around-width)
     var(--hover-outline-around-color);
   --freetext-line-height: 1.35;
   --freetext-padding: 2px;
   --resizer-bg-color: var(--outline-color);
   --resizer-size: 6px;
   --resizer-shift: calc(
     0px - (var(--outline-width) + var(--resizer-size)) / 2 -
       var(--outline-around-width)
   );
   --editorFreeText-editing-cursor: text;
   --editorInk-editing-cursor: url(images/cursor-editorInk.svg) 0 16, pointer;
   --editorHighlight-editing-cursor: url(images/cursor-editorTextHighlight.svg)
       24 24,
     text;
   --editorFreeHighlight-editing-cursor: url(images/cursor-editorFreeHighlight.svg)
       1 18,
     pointer;
 }
 /* The following class is used to hide an element but keep it available to
  * for screen readers. */
 .visuallyHidden {
   position: absolute;
   top: 0;
   left: 0;
   border: 0;
   margin: 0;
   padding: 0;
   width: 0;
   height: 0;
   overflow: hidden;
   white-space: nowrap;
   font-size: 0;
 }
 .textLayer.highlighting {
   cursor: var(--editorFreeHighlight-editing-cursor);
 }
 .textLayer.highlighting:not(.free) span {
   cursor: var(--editorHighlight-editing-cursor);
 }
 .textLayer.highlighting.free span {
   cursor: var(--editorFreeHighlight-editing-cursor);
 }
 @media (min-resolution: 1.1dppx) {
   :root {
     --editorFreeText-editing-cursor: url(images/cursor-editorFreeText.svg) 0 16,
       text;
   }
 }
 @media screen and (forced-colors: active) {
   :root {
     --outline-color: CanvasText;
     --outline-around-color: ButtonFace;
     --resizer-bg-color: ButtonText;
     --hover-outline-color: Highlight;
     --hover-outline-around-color: SelectedItemText;
   }
 }
 [data-editor-rotation="90"] {
   transform: rotate(90deg);
 }
 [data-editor-rotation="180"] {
   transform: rotate(180deg);
 }
 [data-editor-rotation="270"] {
   transform: rotate(270deg);
 }
 .annotationEditorLayer {
   background: transparent;
   position: absolute;
   inset: 0;
   font-size: calc(100px * var(--scale-factor));
   transform-origin: 0 0;
   cursor: auto;
 }
 .annotationEditorLayer.waiting {
   content: "";
   cursor: wait;
   position: absolute;
   inset: 0;
   width: 100%;
   height: 100%;
 }
 .annotationEditorLayer.disabled {
   pointer-events: none;
 }
 .annotationEditorLayer.freetextEditing {
   cursor: var(--editorFreeText-editing-cursor);
 }
 .annotationEditorLayer.inkEditing {
   cursor: var(--editorInk-editing-cursor);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) {
   position: absolute;
   background: transparent;
   z-index: 1;
   transform-origin: 0 0;
   cursor: auto;
   max-width: 100%;
   max-height: 100%;
   border: var(--unfocus-outline);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor).draggable.selectedEditor {
   cursor: move;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor).moving {
   touch-action: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor).selectedEditor {
   border: var(--focus-outline);
   outline: var(--focus-outline-around);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor).selectedEditor::before {
   /*
         This is a workaround for the lack of support for stripes(...) (see
         https://drafts.csswg.org/css-images-4/#stripes).
         The outline should be composed of 1px white, 2px blue and 1px white.
         This could be achieved in different ways:
           - using a linear-gradient;
           - using a box-shadow;
           - using an outline on the selected element and an outline+border on
             the ::before pseudo-element.
         All these options lead to incorrect rendering likely due to rounding
         issues.
         That said it doesn't mean that the current is ideal, but it's the best
         we could come up with for the moment.
         One drawback of this approach is that we use a border on the selected
         element which means that we must take care of it when positioning the
         div in js (see AnnotationEditor._borderLineWidth in editor.js).
       */
   content: "";
   position: absolute;
   inset: 0;
   border: var(--focus-outline-around);
   pointer-events: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor):hover:not(.selectedEditor) {
   border: var(--hover-outline);
   outline: var(--hover-outline-around);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor):hover:not(.selectedEditor)::before {
   content: "";
   position: absolute;
   inset: 0;
   border: var(--focus-outline-around);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar, .textLayer .editToolbar {
   --editor-toolbar-delete-image: url(images/editor-toolbar-delete.svg);
   --editor-toolbar-bg-color: #f0f0f4;
   --editor-toolbar-highlight-image: url(images/toolbarButton-editorHighlight.svg);
   --editor-toolbar-fg-color: #ffffff00;
   --editor-toolbar-border-color: #8f8f9d;
   --editor-toolbar-hover-border-color: var(--editor-toolbar-border-color);
   --editor-toolbar-hover-bg-color: #e0e0e6;
   --editor-toolbar-hover-fg-color: var(--editor-toolbar-fg-color);
   --editor-toolbar-hover-outline: none;
   --editor-toolbar-focus-outline-color: #0060df;
   --editor-toolbar-shadow: 0 2px 6px 0 rgb(58 57 68 / 0.2);
   --editor-toolbar-vert-offset: 6px;
   --editor-toolbar-height: 28px;
   --editor-toolbar-padding: 2px;
   display: flex;
   width: fit-content;
   height: var(--editor-toolbar-height);
   flex-direction: column;
   justify-content: center;
   align-items: center;
   cursor: default;
   pointer-events: auto;
   box-sizing: content-box;
   padding: var(--editor-toolbar-padding);
   position: absolute;
   inset-inline-end: 0;
   inset-block-start: calc(100% + var(--editor-toolbar-vert-offset));
   border-radius: 6px;
   background-color: var(--editor-toolbar-bg-color);
   border: 1px solid var(--editor-toolbar-border-color);
   box-shadow: var(--editor-toolbar-shadow);
 }
 @media (prefers-color-scheme: dark) {
   .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar, .textLayer .editToolbar {
     --editor-toolbar-bg-color: #2b2a33;
     --editor-toolbar-fg-color: #ffffff00;
     --editor-toolbar-hover-bg-color: #52525e;
     --editor-toolbar-focus-outline-color: #0df;
   }
 }
 @media screen and (forced-colors: active) {
   .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar, .textLayer .editToolbar {
     --editor-toolbar-bg-color: ButtonFace;
     --editor-toolbar-fg-color: ButtonText;
     --editor-toolbar-border-color: ButtonText;
     --editor-toolbar-hover-border-color: AccentColor;
     --editor-toolbar-hover-bg-color: ButtonFace;
     --editor-toolbar-hover-fg-color: AccentColor;
     --editor-toolbar-hover-outline: 2px solid
         var(--editor-toolbar-hover-border-color);
     --editor-toolbar-focus-outline-color: ButtonBorder;
     --editor-toolbar-shadow: none;
   }
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar.hidden, .textLayer .editToolbar.hidden {
   display: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar:has(:focus-visible), .textLayer .editToolbar:has(:focus-visible) {
   border-color: transparent;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar:dir(ltr), .textLayer .editToolbar:dir(ltr) {
   transform-origin: 100% 0;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar:dir(rtl), .textLayer .editToolbar:dir(rtl) {
   transform-origin: 0 0;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons, .textLayer .editToolbar .buttons {
   display: flex;
   justify-content: center;
   align-items: center;
   gap: 0;
   height: 100%;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .divider, .textLayer .editToolbar .buttons .divider {
   width: 1px;
   height: calc(2 * var(--editor-toolbar-padding) + var(--editor-toolbar-height));
   background-color: var(--editor-toolbar-border-color);
   display: inline-block;
   margin-inline: 2px;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .highlightButton, .textLayer .editToolbar .buttons .highlightButton {
   width: var(--editor-toolbar-height);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .highlightButton::before, .textLayer .editToolbar .buttons .highlightButton::before {
   content: "";
   background-image: var(--editor-toolbar-highlight-image);
   background-size: contain;
   background-repeat: no-repeat;
   background-position: center;
   display: inline-block;
   background-color: var(--editor-toolbar-fg-color);
   width: 100%;
   height: 100%;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .highlightButton:hover::before, .textLayer .editToolbar .buttons .highlightButton:hover::before {
   background-color: var(--editor-toolbar-hover-fg-color);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .delete, .textLayer .editToolbar .buttons .delete {
   width: var(--editor-toolbar-height);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .delete::before, .textLayer .editToolbar .buttons .delete::before {
   content: "";
   background-image: var(--editor-toolbar-delete-image);
   background-size: contain;
   background-repeat: no-repeat;
   background-position: center;
   display: inline-block;
   background-color: var(--editor-toolbar-fg-color);
   width: 100%;
   height: 100%;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .delete:hover::before, .textLayer .editToolbar .buttons .delete:hover::before {
   background-color: var(--editor-toolbar-hover-fg-color);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons > *, .textLayer .editToolbar .buttons > * {
   height: var(--editor-toolbar-height);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons > :not(.divider), .textLayer .editToolbar .buttons > :not(.divider) {
   border: none;
   background-color: transparent;
   cursor: pointer;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons > :not(.divider):hover, .textLayer .editToolbar .buttons > :not(.divider):hover {
   border-radius: 2px;
   background-color: var(--editor-toolbar-hover-bg-color);
   color: var(--editor-toolbar-hover-fg-color);
   outline: var(--editor-toolbar-hover-outline);
   outline-offset: 1px;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons > :not(.divider):hover:active, .textLayer .editToolbar .buttons > :not(.divider):hover:active {
   outline: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons > :not(.divider):focus-visible, .textLayer .editToolbar .buttons > :not(.divider):focus-visible {
   border-radius: 2px;
   outline: 2px solid var(--editor-toolbar-focus-outline-color);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText, .textLayer .editToolbar .buttons .altText {
   --alt-text-add-image: url(images/altText_add.svg);
   --alt-text-done-image: url(images/altText_done.svg);
   display: flex;
   align-items: center;
   justify-content: center;
   width: max-content;
   padding-inline: 8px;
   pointer-events: all;
   font: menu;
   font-weight: 590;
   font-size: 12px;
   color: var(--editor-toolbar-fg-color);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText:disabled, .textLayer .editToolbar .buttons .altText:disabled {
   pointer-events: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText::before, .textLayer .editToolbar .buttons .altText::before {
   content: "";
   background-image: var(--alt-text-add-image);
   background-size: contain;
   background-repeat: no-repeat;
   background-position: center;
   display: inline-block;
   width: 12px;
   height: 13px;
   background-color: var(--editor-toolbar-fg-color);
   margin-inline-end: 4px;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText:hover::before, .textLayer .editToolbar .buttons .altText:hover::before {
   background-color: var(--editor-toolbar-hover-fg-color);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText.done::before, .textLayer .editToolbar .buttons .altText.done::before {
   background-image: var(--alt-text-done-image);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText .tooltip, .textLayer .editToolbar .buttons .altText .tooltip {
   display: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText .tooltip.show, .textLayer .editToolbar .buttons .altText .tooltip.show {
   --alt-text-tooltip-bg: #f0f0f4;
   --alt-text-tooltip-fg: #15141a;
   --alt-text-tooltip-border: #8f8f9d;
   --alt-text-tooltip-shadow: 0px 2px 6px 0px rgb(58 57 68 / 0.2);
   display: inline-flex;
   flex-direction: column;
   align-items: center;
   justify-content: center;
   position: absolute;
   top: calc(100% + 2px);
   inset-inline-start: 0;
   padding-block: 2px 3px;
   padding-inline: 3px;
   max-width: 300px;
   width: max-content;
   height: auto;
   font-size: 12px;
   border: 0.5px solid var(--alt-text-tooltip-border);
   background: var(--alt-text-tooltip-bg);
   box-shadow: var(--alt-text-tooltip-shadow);
   color: var(--alt-text-tooltip-fg);
   pointer-events: none;
 }
 @media (prefers-color-scheme: dark) {
   .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText .tooltip.show, .textLayer .editToolbar .buttons .altText .tooltip.show {
     --alt-text-tooltip-bg: #1c1b22;
     --alt-text-tooltip-fg: #fbfbfe;
     --alt-text-tooltip-shadow: 0px 2px 6px 0px #15141a;
   }
 }
 @media screen and (forced-colors: active) {
   .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor, .highlightEditor) .editToolbar .buttons .altText .tooltip.show, .textLayer .editToolbar .buttons .altText .tooltip.show {
     --alt-text-tooltip-bg: Canvas;
     --alt-text-tooltip-fg: CanvasText;
     --alt-text-tooltip-border: CanvasText;
     --alt-text-tooltip-shadow: none;
   }
 }
 .annotationEditorLayer .freeTextEditor {
   padding: calc(var(--freetext-padding) * var(--scale-factor));
   width: auto;
   height: auto;
   touch-action: none;
 }
 .annotationEditorLayer .freeTextEditor .internal {
   background: transparent;
   border: none;
   inset: 0;
   overflow: visible;
   white-space: nowrap;
   font: 10px sans-serif;
   line-height: var(--freetext-line-height);
   user-select: none;
 }
 .annotationEditorLayer .freeTextEditor .overlay {
   position: absolute;
   display: none;
   background: transparent;
   inset: 0;
   width: 100%;
   height: 100%;
 }
 .annotationEditorLayer freeTextEditor .overlay.enabled {
   display: block;
 }
 .annotationEditorLayer .freeTextEditor .internal:empty::before {
   content: attr(default-content);
   color: gray;
 }
 .annotationEditorLayer .freeTextEditor .internal:focus {
   outline: none;
   user-select: auto;
 }
 .annotationEditorLayer .inkEditor {
   width: 100%;
   height: 100%;
 }
 .annotationEditorLayer .inkEditor.editing {
   cursor: inherit;
 }
 .annotationEditorLayer .inkEditor .inkEditorCanvas {
   position: absolute;
   inset: 0;
   width: 100%;
   height: 100%;
   touch-action: none;
 }
 .annotationEditorLayer .stampEditor {
   width: auto;
   height: auto;
 }
 .annotationEditorLayer .stampEditor canvas {
   position: absolute;
   width: 100%;
   height: 100%;
   margin: 0;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers {
   position: absolute;
   inset: 0;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers.hidden {
   display: none;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer {
   width: var(--resizer-size);
   height: var(--resizer-size);
   background: content-box var(--resizer-bg-color);
   border: var(--focus-outline-around);
   border-radius: 2px;
   position: absolute;
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.topLeft {
   top: var(--resizer-shift);
   left: var(--resizer-shift);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.topMiddle {
   top: var(--resizer-shift);
   left: calc(50% + var(--resizer-shift));
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.topRight {
   top: var(--resizer-shift);
   right: var(--resizer-shift);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.middleRight {
   top: calc(50% + var(--resizer-shift));
   right: var(--resizer-shift);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.bottomRight {
   bottom: var(--resizer-shift);
   right: var(--resizer-shift);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.bottomMiddle {
   bottom: var(--resizer-shift);
   left: calc(50% + var(--resizer-shift));
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.bottomLeft {
   bottom: var(--resizer-shift);
   left: var(--resizer-shift);
 }
 .annotationEditorLayer :is(.freeTextEditor, .inkEditor, .stampEditor) > .resizers > .resizer.middleLeft {
   top: calc(50% + var(--resizer-shift));
   left: var(--resizer-shift);
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.bottomRight, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.bottomRight, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.bottomRight, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.bottomRight {
   cursor: nwse-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.bottomMiddle, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.bottomMiddle, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.bottomMiddle, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.bottomMiddle {
   cursor: ns-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.bottomLeft, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.bottomLeft, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.bottomLeft, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.bottomLeft {
   cursor: nesw-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.middleLeft, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.middleLeft, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.middleLeft, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.middleLeft {
   cursor: ew-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.bottomRight, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.bottomRight, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.bottomRight, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.topLeft, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.bottomRight {
   cursor: nesw-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.bottomMiddle, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.bottomMiddle, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.bottomMiddle, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.topMiddle, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.bottomMiddle {
   cursor: ew-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.bottomLeft, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.bottomLeft, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.bottomLeft, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.topRight, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.bottomLeft {
   cursor: nwse-resize;
 }
 .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="0"] :is([data-editor-rotation="90"], [data-editor-rotation="270"]) > .resizers > .resizer.middleLeft, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="90"] :is([data-editor-rotation="0"], [data-editor-rotation="180"]) > .resizers > .resizer.middleLeft, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="180"] :is([data-editor-rotation="270"], [data-editor-rotation="90"]) > .resizers > .resizer.middleLeft, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.middleRight, .annotationEditorLayer[data-main-rotation="270"] :is([data-editor-rotation="180"], [data-editor-rotation="0"]) > .resizers > .resizer.middleLeft {
   cursor: ns-resize;
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="90"], [data-main-rotation="90"] [data-editor-rotation="0"], [data-main-rotation="180"] [data-editor-rotation="270"], [data-main-rotation="270"] [data-editor-rotation="180"]) .editToolbar {
   rotate: 270deg;
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="90"], [data-main-rotation="90"] [data-editor-rotation="0"], [data-main-rotation="180"] [data-editor-rotation="270"], [data-main-rotation="270"] [data-editor-rotation="180"]) .editToolbar:dir(ltr) {
   inset-inline-end: calc(0px - var(--editor-toolbar-vert-offset));
   inset-block-start: 0;
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="90"], [data-main-rotation="90"] [data-editor-rotation="0"], [data-main-rotation="180"] [data-editor-rotation="270"], [data-main-rotation="270"] [data-editor-rotation="180"]) .editToolbar:dir(rtl) {
   inset-inline-end: calc(100% + var(--editor-toolbar-vert-offset));
   inset-block-start: 0;
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="180"], [data-main-rotation="90"] [data-editor-rotation="90"], [data-main-rotation="180"] [data-editor-rotation="0"], [data-main-rotation="270"] [data-editor-rotation="270"]) .editToolbar {
   rotate: 180deg;
   inset-inline-end: 100%;
   inset-block-start: calc(0pc - var(--editor-toolbar-vert-offset));
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="270"], [data-main-rotation="90"] [data-editor-rotation="180"], [data-main-rotation="180"] [data-editor-rotation="90"], [data-main-rotation="270"] [data-editor-rotation="0"]) .editToolbar {
   rotate: 90deg;
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="270"], [data-main-rotation="90"] [data-editor-rotation="180"], [data-main-rotation="180"] [data-editor-rotation="90"], [data-main-rotation="270"] [data-editor-rotation="0"]) .editToolbar:dir(ltr) {
   inset-inline-end: calc(100% + var(--editor-toolbar-vert-offset));
   inset-block-start: 100%;
 }
 .annotationEditorLayer :is([data-main-rotation="0"] [data-editor-rotation="270"], [data-main-rotation="90"] [data-editor-rotation="180"], [data-main-rotation="180"] [data-editor-rotation="90"], [data-main-rotation="270"] [data-editor-rotation="0"]) .editToolbar:dir(rtl) {
   inset-inline-start: calc(0px - var(--editor-toolbar-vert-offset));
   inset-block-start: 0;
 }
 .dialog.altText {
   /* See alt_text_manager.js */
 }
 .dialog.altText::backdrop {
   /* This is needed to avoid to darken the image the user want to describe. */
   mask: url(#alttext-manager-mask);
 }
 .dialog.altText.positioned {
   margin: 0;
 }
 .dialog.altText #altTextContainer {
   width: 300px;
   height: fit-content;
   display: inline-flex;
   flex-direction: column;
   align-items: flex-start;
   gap: 16px;
 }
 .dialog.altText #altTextContainer #overallDescription {
   display: flex;
   flex-direction: column;
   align-items: flex-start;
   gap: 4px;
   align-self: stretch;
 }
 .dialog.altText #altTextContainer #overallDescription span {
   align-self: stretch;
 }
 .dialog.altText #altTextContainer #overallDescription .title {
   font-size: 13px;
   font-style: normal;
   font-weight: 590;
 }
 .dialog.altText #altTextContainer #addDescription {
   display: flex;
   flex-direction: column;
   align-items: stretch;
   gap: 8px;
 }
 .dialog.altText #altTextContainer #addDescription .descriptionArea {
   flex: 1;
   padding-inline: 24px 10px;
 }
 .dialog.altText #altTextContainer #addDescription .descriptionArea textarea {
   width: 100%;
   min-height: 75px;
 }
 .dialog.altText #altTextContainer #buttons {
   display: flex;
   justify-content: flex-end;
   align-items: flex-start;
   gap: 8px;
   align-self: stretch;
 }
 .colorPicker {
   --hover-outline-color: #0250bb;
   --selected-outline-color: #0060df;
   --swatch-border-color: #cfcfd8;
 }
 @media (prefers-color-scheme: dark) {
   .colorPicker {
     --hover-outline-color: #80ebff;
     --selected-outline-color: #aaf2ff;
     --swatch-border-color: #52525e;
   }
 }
 @media screen and (forced-colors: active) {
   .colorPicker {
     --hover-outline-color: Highlight;
     --selected-outline-color: var(--hover-outline-color);
     --swatch-border-color: ButtonText;
   }
 }
 .colorPicker .swatch {
   width: 16px;
   height: 16px;
   border: 1px solid var(--swatch-border-color);
   border-radius: 100%;
   outline-offset: 2px;
   box-sizing: border-box;
   forced-color-adjust: none;
 }
 .colorPicker button:is(:hover, .selected) > .swatch {
   border: none;
 }
 .annotationEditorLayer[data-main-rotation="0"] .highlightEditor:not(.free) > .editToolbar {
   rotate: 0deg;
 }
 .annotationEditorLayer[data-main-rotation="90"] .highlightEditor:not(.free) > .editToolbar {
   rotate: 270deg;
 }
 .annotationEditorLayer[data-main-rotation="180"] .highlightEditor:not(.free) > .editToolbar {
   rotate: 180deg;
 }
 .annotationEditorLayer[data-main-rotation="270"] .highlightEditor:not(.free) > .editToolbar {
   rotate: 90deg;
 }
 .annotationEditorLayer .highlightEditor {
   position: absolute;
   background: transparent;
   z-index: 1;
   cursor: auto;
   max-width: 100%;
   max-height: 100%;
   border: none;
   outline: none;
   pointer-events: none;
   transform-origin: 0 0;
 }
 .annotationEditorLayer .highlightEditor:not(.free) {
   transform: none;
 }
 .annotationEditorLayer .highlightEditor .internal {
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
   pointer-events: auto;
 }
 .annotationEditorLayer .highlightEditor.disabled .internal {
   pointer-events: none;
 }
 .annotationEditorLayer .highlightEditor.selectedEditor .internal {
   cursor: pointer;
 }
 .annotationEditorLayer .highlightEditor .editToolbar {
   --editor-toolbar-colorpicker-arrow-image: url(images/toolbarButton-menuArrow.svg);
   transform-origin: center !important;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker {
   position: relative;
   width: auto;
   display: flex;
   justify-content: center;
   align-items: center;
   gap: 4px;
   padding: 4px;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker::after {
   content: "";
   background-image: var(--editor-toolbar-colorpicker-arrow-image);
   background-size: contain;
   background-repeat: no-repeat;
   background-position: center;
   display: inline-block;
   background-color: var(--editor-toolbar-fg-color);
   width: 12px;
   height: 12px;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker:hover::after {
   background-color: var(--editor-toolbar-hover-fg-color);
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker:has(.dropdown:not(.hidden)) {
   background-color: var(--editor-toolbar-hover-bg-color);
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker:has(.dropdown:not(.hidden))::after {
   scale: -1;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker .dropdown {
   position: absolute;
   display: flex;
   justify-content: center;
   align-items: center;
   flex-direction: column;
   gap: 11px;
   padding-block: 8px;
   border-radius: 6px;
   background-color: var(--editor-toolbar-bg-color);
   border: 1px solid var(--editor-toolbar-border-color);
   box-shadow: var(--editor-toolbar-shadow);
   inset-block-start: calc(100% + 4px);
   width: calc(100% + 2 * var(--editor-toolbar-padding));
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker .dropdown button {
   width: 100%;
   height: auto;
   border: none;
   cursor: pointer;
   display: flex;
   justify-content: center;
   align-items: center;
   background: none;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker .dropdown button:is(:active, :focus-visible) {
   outline: none;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker .dropdown button > .swatch {
   outline-offset: 2px;
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker .dropdown button[aria-selected="true"] > .swatch {
   outline: 2px solid var(--selected-outline-color);
 }
 .annotationEditorLayer .highlightEditor .editToolbar .buttons .colorPicker .dropdown button:is(:hover, :active, :focus-visible) > .swatch {
   outline: 2px solid var(--hover-outline-color);
 }
 .editorParamsToolbar:has(#highlightParamsToolbarContainer) {
   padding: unset;
 }
 #highlightParamsToolbarContainer {
   height: auto;
   padding-inline: 10px;
   padding-block: 10px 16px;
   gap: 16px;
   display: flex;
   flex-direction: column;
   box-sizing: border-box;
 }
 #highlightParamsToolbarContainer .editorParamsLabel {
   width: fit-content;
   inset-inline-start: 0;
 }
 #highlightParamsToolbarContainer .colorPicker {
   display: flex;
   flex-direction: column;
   gap: 8px;
 }
 #highlightParamsToolbarContainer .colorPicker .dropdown {
   display: flex;
   justify-content: space-between;
   align-items: center;
   flex-direction: row;
   height: auto;
 }
 #highlightParamsToolbarContainer .colorPicker .dropdown button {
   width: auto;
   height: auto;
   border: none;
   cursor: pointer;
   display: flex;
   justify-content: center;
   align-items: center;
   background: none;
   flex: 0 0 auto;
 }
 #highlightParamsToolbarContainer .colorPicker .dropdown button .swatch {
   width: 24px;
   height: 24px;
 }
 #highlightParamsToolbarContainer .colorPicker .dropdown button:is(:active, :focus-visible) {
   outline: none;
 }
 #highlightParamsToolbarContainer .colorPicker .dropdown button[aria-selected="true"] > .swatch {
   outline: 2px solid var(--selected-outline-color);
 }
 #highlightParamsToolbarContainer .colorPicker .dropdown button:is(:hover, :active, :focus-visible) > .swatch {
   outline: 2px solid var(--hover-outline-color);
 }
 #highlightParamsToolbarContainer #editorHighlightThickness {
   display: flex;
   flex-direction: column;
   align-items: center;
   gap: 4px;
   align-self: stretch;
 }
 #highlightParamsToolbarContainer #editorHighlightThickness .editorParamsLabel {
   width: 100%;
   height: auto;
   align-self: stretch;
 }
 #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker {
   display: flex;
   justify-content: space-between;
   align-items: center;
   align-self: stretch;
   --example-color: #bfbfc9;
 }
 @media (prefers-color-scheme: dark) {
   #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker {
     --example-color: #80808e;
   }
 }
 @media screen and (forced-colors: active) {
   #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker {
     --example-color: CanvasText;
   }
 }
 :is(#highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker > .editorParamsSlider[disabled]) {
   opacity: 0.4;
 }
 #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker::before, #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker::after {
   content: "";
   width: 8px;
   aspect-ratio: 1;
   display: block;
   border-radius: 100%;
   background-color: var(--example-color);
 }
 #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker::after {
   width: 24px;
 }
 #highlightParamsToolbarContainer #editorHighlightThickness .thicknessPicker .editorParamsSlider {
   width: unset;
   height: 14px;
 }
 #highlightParamsToolbarContainer #editorHighlightVisibility {
   display: flex;
   flex-direction: column;
   align-items: flex-start;
   gap: 8px;
   align-self: stretch;
 }
 #highlightParamsToolbarContainer #editorHighlightVisibility .divider {
   --divider-color: #d7d7db;
   margin-block: 4px;
   width: 100%;
   height: 1px;
   background-color: var(--divider-color);
 }
 @media (prefers-color-scheme: dark) {
   #highlightParamsToolbarContainer #editorHighlightVisibility .divider {
     --divider-color: #8f8f9d;
   }
 }
 @media screen and (forced-colors: active) {
   #highlightParamsToolbarContainer #editorHighlightVisibility .divider {
     --divider-color: CanvasText;
   }
 }
 #highlightParamsToolbarContainer #editorHighlightVisibility .toggler {
   display: flex;
   justify-content: space-between;
   align-items: center;
   align-self: stretch;
 }
 